//Declaration global variable
logic bit err1,err2,err3,err4;
//Receiving signal w.r.t to DUT
interface Rx_if(input logic clk)
  logic [3:0] data_in;
  logic push,pop,reset;
  clocking cb @(posedge clk)
    output data_in,push,pop,reset;
  endclocking : cb
  modport DUT(input data_in,push,pop,reset);
  modport TEST(clocking cb);
  endinterface:Rx_if
    // Transmitting signal w.r.t to DUT
    interface Tx_if(input logic clk);
      logic [3:0] data_out;
  logic fifo_full,fifo_empty;
  clocking cb @(posedge clk)
    input data_out,fifo_full,fifo_empty;
  endclocking : cb
      modport DUT(output data_out,fifo_full,fifo_empty);
  modport TEST(clocking cb);
  endinterface:Tx_if
  // Top block
    module top;
      //clock generator
      bit clk;
      always #5 clk=!clk;
      //clock generator finishes
      Rx_if Rx(clk);
      Tx_if Tx(clk);
      Fifo f1(Rx,Tx);
      Test t1(Rx,Tx);
    endmodule:top
    //Test Module
    program automatic test(Rx_if.TEST Rx2,Tx_if.TEST Tx2);
      Environment env;
      initial 
        begin
           env=new;
           env.new;
           env.build;
           env.run;
        end
    endprogram
    class Environment;
      Generator gen;
      Agent agt;
      Driver drv;
      Monitor mon;
      Scoreboard scb;
      mailbox gen2agt,agt2drv,agt2scb,mon2scb;
          extern function new;
          extern function void build;
          extern task run;
     endclass
            function Environment::new;
              //Initialize mailboxes
              gen2agt=new;
              agt2drv=new;
              agt2scb=new;
              mon2scb=new;
              //Initialize transactors
              gen=new(gen2agt);
              agt=new(gen2agt,agt2drv,agt2scb);
              drv=new(agt2drv);
              mon=new(agt2scb);
              scb=new(agt2scb,mon2scb);
            endfunction
            function void Environment::build;
              gen.build;
              agt.build;
              drv.build;
              mon.build;
              scb.build;
            endfunction
            task Environment :: run;
              fork
                gen.run;
                agt.run;
                drv.run;
                mon.run;
                scb.run;
              join
            endtask
      class Transaction
      randc bit[3:0] data_in;
      randc bit push,pop,reset;
      constraint c {
        push inside{[0:1]};
        pop inside{[0:1]};
        reset inside{[0:1]};
      }
      //copy function
      virtual function Transaction copy;
        copy=new;
        copy.data_in=data_in;
        copy.push=push;
        copy.pop=pop;
      endfunction
      //copy function finishes
    endclass:Transaction
    class Generator
      mailbox gen2agt;
      Transaction blueprint;
      function new (mailbox gen2agt)
        this.gen2agt=gen2agt;
      endfunction
      function build
        blueprint=new;
      endfunction
      task run
        repeat(10)
          begin
            Transaction tr;
            forever 
              begin
                assert(blueprint.randomize());
                tr=blueprint.copy;
                gen2agt.put(tr);
              end
          end
      endtask
      class Agent
        mailbox gen2agt,agt2drv,agt2scb;
        function new(mailbox gen2agt,agt2drv,agt2scb)
          this.gen2agt=gen2agt;
          this.agt2drv=agt2drv;
          this.agt2scb=agt2scb;
          endfunction
        function build
          transaction tr;
        endfunction
        task run
          repeat(10)
            begin
              gen2agt.get(tr);
              if(tr.reset)
                begin
                  Rx2.cb.reset<=1;
                  Rx2.cb.data_in<=0;
                  Rx2.cb.push<=0;
                  Rx2.cb.pop<=0;
                end
              else
                begin
                  Rx2.cb.data_in<=tr.data_in;
                  Rx2.cb.reset<=tr.reset;
                  Rx2.cb.push<=tr.push;
                  Rx2.cb.pop<=tr.pop;
                end
            end
              agt2drv(Rx2);
              agt2scb(Rx2);
            end
        endtask
      endclass:Agent
      class Driver
        mailbox agt2drv;
        function new(mailbox agt2drv)
          this.agt2drv=agt2drv;
        endfunction
        function build
          // void
        endfunction
        task run
          repeat(10)
            begin
              agt2drv.get(Rx2);
              //@(Rx.cb)
              //driving signal into DUT
              Rx1.data_in<=Rx2.cb.data_in;
               Rx1.reset<=Rx2.cb.reset;
               Rx1.push<=Rx2.cb.push;
               Rx1.pop<=Rx2.cb.pop;
        endtask:run
      endclass :Driver
              //DUT coding starts here 
        module Fifo(Rx_if.DUT Rx1,Tx_if.DUT Tx1);
        logic [3:0] data_mux1,data_mux2,data_mux3,data_mux4;
        always @(posedge clk)
          begin
            if(Rx1.reset)
              begin
                data_mux1<=0;
                data_mux2<=0;
                data_mux3<=0;
                data_mux4<=0;
              end
            else if(Rx1.push)
              begin
                data_mux4<=data_mux3;
                 data_mux3<=data_mux2;
                 data_mux2<=data_mux1;
                 data_mux1<=Rx1.data_in;
              end
          end
        logic [2:0] count;
        always @(posedge clk)
          begin
            if(Rx1.reset)
              count=3'd0;
          end
        always @(Rx1.push or Rx1.pop)
          begin
            if(Rx1.pop==1)
              begin
                case(count)
                  3'd1:Tx1.data_out=data_mux1;
                  3'd2:Tx1.data_out=data_mux2;
                  3'd3:Tx1.data_out=data_mux3;
                  3'd4:Tx1.data_out=data_mux4;
                endcase
                count=count-1;
              end
                else if(Rx1.push==1)
                  begin
                    count=count+3'd1;
                  end
          end
            always@(count)
              begin
                if(count==3'd4)
                  Tx1.fifo_full=1;
                else
                  Tx1.fifo_full=0;
                if(count==3'd0)
                  Tx1.fifo_empty=1;
                else
                  Tx1.fifo_empty=0;
              end
          // from here assertion is used to check corner cases
              a1:assert(Rx1.reset==1&&Tx1.data_out==0)
              err1=1'b0;
            else 
              err1=1'b1;
            a2:assert(Rx1.push==1&&Rx1.pop==1)
              errr2=1'b1;
            else
              err2=1'b0;
            a3:assert(Tx1.fifo_full==1&&Rx1.push==1)
              err3=1'b1;
            else
              err3=1'b0;
            a4:assert(Tx1.fifo_empty==1&&Rx1.pop==1)
              err4=1'b1;
            else
              err4=1'b0;
          //assertion completes
          //Covergroup starts
            covergroup covport
              a1:coverpoint Tx1.fifo_full;
              a2:coverpoint Tx1.fifo_empty;
              a3:coverpoint Tx1.data_out;
              a4:coverpoint Rx1.push;
              a5:coverpoint Rx1.pop;
              a6:coverpoint Rx1.data_in;
              a7:coverpoint err4;
              a8:coverpoint err3;
              a9:coverpoint err2;
              a10:coverpoint err1;
            endgroup;
            covport ck=new;
            ck.sample();
          //Covergroup ends
        endmodule:Fifo
            class Monitor
              mailbox mon2scb;
              function new(mailbox mon2scb)
                this.mon2scb=mon2scb;
              endfunction
              function build
                //void
              endfunction
              task run
                repeat(10) 
                  begin
                    @(posedge Tx2.cb)
                    Tx2.cb.data_out<=Tx1.data_out;
                    Tx2.cb.fifo_empty<=Tx1.fifo_empty;
                    Tx2.cb.fifo_full<=Tx1.fifo_full;
                    mon2scb.put(Tx2);
                  end
               endtask
            endclass:Monitor
            class Scoreboard
              mailbox agt2scb,mon2scb;
              logic [3:0] bit Data_out;
              logic bit pred_fifo_full,pred_fifo_emp;
              logic check_err1,check_err2,check_err3,check_err4;
              logic [3:0] bit Data_mux4,Data_mux3,Data_mux2,Data_mux1;
              function new(mailbox agt2scb,mon2scb)
                this.agt2scb=agt2scb;
                this.mon2scb=mon2scb;
              endfunction
              function build
                //void
              endfunction
              task run
                repeat(10)
                  begin
                    agt2scb.get(Rx2);
                    mon2scb.get(Tx2);
                    if(Rx2.cb.reset==1)
                      check_err1=0;
                    assert(pred_data==err1)
                      $display("No error");
                    else
                      $display("Error in dut");
                    if(Rx2.push==1&&Rx2.pop==1)
                      check_err2=1;
                    assert(check_err2==err2)
                      $display("No error");
                    else
                      $display("Error in DUT");
                    if(Rx2.push==1&&Tx2.pred_fifo_full==1)
                      check_err3=1;
                    assert(check_err3==err3)
                      $display("No error");
                    else
                      $display("Error in DUT");
                    if(Rx2.pop==1&&Tx2.pred_fifo_emp==1)
                      check_err4=1;
                    assert(check_err4==err4)
                      $display("No error in DUT");
                    else
                      $display("Error in DUT");
                    logic [3:0] count;
                    always @(Rx2.cb)
                      if(Rx2.cb.push)
                        begin
                          Data_mux4<=Data_mux3;
                          Data_mux3<=Data_mux2;
                          Data_mux2<=Data_mux1;
                          Data_mux1<=Rx2.cb.data_in;
                        end
                    always @(posedge clk)
                      begin
                        if(Rx2.cb.reset)
                          count =3'd0;
                      end
                    always @(Rx2.cb.push or Rx2.cb.pop)
                      begin
                        if(Rx2.cb.pop==1)
                          begin
                            case(count)
                               3'd1:Data_out=Data_mux1;
                               3'd2:Data_out=Data_mux2;
                               3'd3:Data_out=Data_mux3;
                               3'd4:Data_out=Data_mux4;
                            endcase
                              count=count-1;
                          end
                        else if(Rx2.cb.push==1)
                          begin
                            count=count+3'd1;
                          end
                      end
                        always @(count)
                          begin
                            if(count==3'd4)
                              begin
                                pred_fifo_full=1
                              end
                            else
                              begin
                                pred_fifo_full=0;
                              end
                            if(count==3'd0)
                              begin
                                pred_fifo_emp=1;
                              end
                            else
                              begin
                                pred_fifo_emp=0;
                              end
                           end
                        assert(Data_out==Tr2.cb.data_out);
                          $display("Correct");
                        else
                          $display("Error");
                        assert(pred_fifo_full==Tr2.cb.fifo_full);
                          $display("correct");
                        else
                          $display("Error");
                          assert(pred_fifo_emp==Tr2.cb.fifo_empty);
                        $display("correct");
                        else
                          $display("Error");
                       end
                    endclass:Scoreboard
                          
                            
                            
                            
                            
                            
                            
                           
                            
                      
                      
                                          
                
                    
                    
            
            
            
            
            
            
              
              
            
    
      
    
